name: Open Banking Backend

on:
  push:
    branches: 
      - master
  pull_request:
    branches: 
      - dev
  
jobs:
  docker-steps:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:4.2.21
        ports:
          - "27017:27017"
      postgres:
        image: postgres:10.21-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: circle_test
      golang:
        image: golang:1.17-alpine3.15
        ports:
          - "8080:8080"
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Log Env Variables
        run: |
          echo "Logging Environment Variables"
          echo "============="
          echo "Present Working Directory: $(pwd)"
          echo "Present Working Directory: $(pwd -P)"
          echo "GOROOT: ${GOROOT}"
          echo "GOPATH: ${GOPATH}"
          export GOBIN=$GOPATH/bin
          echo "GOBIN: ${GOBIN}"
          export PATH=$PATH:$GOBIN
          ls -latr $GOROOT
          ls -latr $GOPATH
          ls -latr $GOBIN
          go env
          echo "============="
      - name: Install Dockerize
        run: |
          wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
        env:
          DOCKERIZE_VERSION: v0.3.0
      # - name: Cache Keys
      #   uses: actions/cache@v3
      #   with:
      #     restore-keys: v1-pkg-cache
      - name: Run Tests
        env: 
          OBG_DB_TEST_DSN: postgres://postgres:postgres@localhost:5432/circle_test?sslmode=disable
          OBG_MONGO_TEST_DSN: 'mongodb://localhost:27017'
          OBG_MONGO_TEST_DB: test
        run: go test cmd/web/*.go
      # - name: Run Build
      #   run: |
      #     GOOS=linux GOARCH=amd64 make build
      #     ls -la
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)
      - name: Run Lambda
        run: make lambda
      - name: Persist to Workspace
        uses: actions/upload-artifact@v3
        with:
          name: OBG
          path: .
  
  deploy-project:
    runs-on: ubuntu-latest
    needs: ["docker-steps"]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: deploy
        run: |
          aws lambda update-function-code --function-name github-actions --zip-file fileb://main.zip