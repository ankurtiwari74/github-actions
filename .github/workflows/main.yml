name: Open Banking Backend

on:
  push:
    branches: 
      - master
      - dev
      - stage
      - consent_expire_dev
      - consent_expire_stage
      - consent_expire_prod
      - add_free_credits_dev
      - add_free_credits_stage
      - add_free_credits_prod
  pull_request:
    branches: 
      - dev
  
jobs:
  deployment-steps:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo:4.2.21
        ports:
          - "27017:27017"
      postgres:
        image: postgres:10.21-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: circle_test
      golang:
        image: golang:1.17-alpine3.15
        ports:
          - "8080:8080"
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Log Env Variables
        run: |
          echo "Logging Environment Variables"
          echo "============="
          echo "Present Working Directory: $(pwd)"
          echo "Present Working Directory: $(pwd -P)"
          echo "GOROOT: ${GOROOT}"
          echo "GOPATH: ${GOPATH}"
          export GOBIN=$GOPATH/bin
          echo "GOBIN: ${GOBIN}"
          export PATH=$PATH:$GOBIN
          ls -latr $GOROOT
          ls -latr $GOPATH
          ls -latr $GOBIN
          go env
          echo "============="
      - name: Install Dockerize
        run: |
          wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
        env:
          DOCKERIZE_VERSION: v0.3.0
      # - name: Cache Keys
      #   uses: actions/cache@v3
      #   with:
      #     restore-keys: v1-pkg-cache
      - name: Run Tests
        env: 
          OBG_DB_TEST_DSN: postgres://postgres:postgres@localhost:5432/circle_test?sslmode=disable
          OBG_MONGO_TEST_DSN: 'mongodb://localhost:27017'
          OBG_MONGO_TEST_DB: test
        run: make test
      - name: Run Build
        run: |
          GOOS=linux GOARCH=amd64 make build
          ls -la
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa # optional
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: fail # replace / ignore / fail; optional (defaults to fail)
      - name: Run Lambda
        run: make lambda
      - name: Persist to Workspace
        uses: actions/upload-artifact@v3
        with:
          name: OBG
          path: .
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deployment
        env:
            SSH_DEPLOY_PATH: ${{ secrets.SSH_DEPLOY_PATH }}
            SSH_HOST : ${{ secrets.SSH_HOST }}
            SSH_USER : ${{ secrets.SSH_USER }}
        run: |
          echo ${GITHUB_REF#refs/heads/}
          if [ "${GITHUB_REF#refs/heads/}" == "consent_expire_dev" ];
          then
            echo "Deploying to consent_expire_dev"
            aws lambda update-function-code --function-name QAConsentExpire --zip-file fileb://main.zip
          elif [ "${GITHUB_REF#refs/heads/}" == "consent_expire_stage" ]
          then
            echo "Deploying to consent_expire_stage"
            aws lambda update-function-code --function-name StageConsentExpire --zip-file fileb://main.zip
          elif [ "${GITHUB_REF#refs/heads/}" == "consent_expire_prod" ]
          then
            echo "Deploying to consent_expire_prod"
            aws lambda update-function-code --function-name ProdConsentExpire --zip-file fileb://main.zip
          elif [ "${GITHUB_REF#refs/heads/}" == "add_free_credits_dev" ]
          then
            echo "Deploying to add_free_credits_dev"
            aws lambda update-function-code --function-name QAAddFreeCredits --zip-file fileb://main.zip
          elif [ "${GITHUB_REF#refs/heads/}" == "add_free_credits_stage" ]
          then
            echo "Deploying to add_free_credits_stage"
            aws lambda update-function-code --function-name StageAddFreeCredits --zip-file fileb://main.zip
          elif [ "${GITHUB_REF#refs/heads/}" == "add_free_credits_prod" ]
          then
            echo "Deploying to add_free_credits_prod"
            aws lambda update-function-code --function-name ProdAddFreeCredits --zip-file fileb://main.zip
          elif [ "${GITHUB_REF#refs/heads/}" == "dev" ]; then
            echo "Deploying to dev"
            ls -lah
            echo ${GITHUB_REF#refs/heads/} > branch_name.tag
            echo ${{github.run_number}} > build.tag
            echo ${GITHUB_REF#refs/heads/}
            echo ${{github.run_number}}
            pwd
            echo ${SSH_USER}
            echo ${SSH_HOST}
            echo ${SSH_DEPLOY_PATH}
            ls -la
            scp -o "StrictHostKeyChecking=no" main "${SSH_USER}@3.7.45.185:${SSH_DEPLOY_PATH}"
            scp -o "StrictHostKeyChecking=no" build.tag "${SSH_USER}@3.7.45.185:${SSH_DEPLOY_PATH}"
            scp -o "StrictHostKeyChecking=no" branch_name.tag "${SSH_USER}@3.7.45.185:${SSH_DEPLOY_PATH}"
          elif [ "${GITHUB_REF#refs/heads/}" == "master" ]; then
            echo "Deploying to master"
            ssh -V
            ls -lah
            echo ${GITHUB_REF#refs/heads/} > branch_name.tag
            echo ${{github.run_number}} > build.tag
            ssh -o "StrictHostKeyChecking=no" $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST  "hostname"
            ssh -o "StrictHostKeyChecking=no" -J $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST deploy@10.0.11.153 "hostname"
            ssh -o "StrictHostKeyChecking=no" -J $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST deploy@10.0.11.153 " if [[ ! -d $SSH_DEPLOY_PATH ]]; then mkdir -p $SSH_DEPLOY_PATH ; fi"
            scp -o "StrictHostKeyChecking=no" -o 'ProxyJump $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST' gateway deploy@10.0.11.153:$SSH_DEPLOY_PATH
            scp -o "StrictHostKeyChecking=no" -o 'ProxyJump $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST' build.tag deploy@10.0.11.153:$SSH_DEPLOY_PATH
            scp -o "StrictHostKeyChecking=no" -o 'ProxyJump $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST' branch_name.tag deploy@10.0.11.153:$SSH_DEPLOY_PATH
            ssh -o "StrictHostKeyChecking=no" -J $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST deploy@10.0.11.153 "cd /home/deploy && . deploy.sh"
            ssh -o "StrictHostKeyChecking=no" -J $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST deploy@10.0.12.26 "hostname"
            ssh -o "StrictHostKeyChecking=no" -J $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST deploy@10.0.12.26 " if [[ ! -d $SSH_DEPLOY_PATH ]]; then mkdir -p $SSH_DEPLOY_PATH ; fi"
            scp -o "StrictHostKeyChecking=no" -o 'ProxyJump $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST' gateway deploy@10.0.12.26:$SSH_DEPLOY_PATH
            scp -o "StrictHostKeyChecking=no" -o 'ProxyJump $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST' build.tag deploy@10.0.12.26:$SSH_DEPLOY_PATH
            scp -o "StrictHostKeyChecking=no" -o 'ProxyJump $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST' branch_name.tag deploy@10.0.12.26:$SSH_DEPLOY_PATH
            ssh -o "StrictHostKeyChecking=no" -J $SSH_USER_BASTION@$SSH_PROD_BASTION_HOST deploy@10.0.12.26 "cd /home/deploy && . deploy.sh"
          else
            echo "There is master branch, dry run only!"
          fi